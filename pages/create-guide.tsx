import Head from "next/head";
import Image from "next/image";
import StepComponent from "@/components/StepComponent";
import { useState } from "react";
import { db } from "../firebaseUtils/firebase";
import { doc, addDoc, collection } from "firebase/firestore";
import NavBar from "@/components/coreComponents/NavBar";
import { useUserAuth } from "@/contexts/UserContext";
import { usePostsContext } from "@/contexts/PostsContext";
import MainContainer from "@/components/coreComponents/MainContainer";
import { useRouter } from "next/router";
import H1 from "@/components/coreComponents/styleComponents/H1";

export default function Home() {
  interface step {
    id: number;
    content: string;
    name: string;
    imageUrl: string;
  }
  const [stepArray, setStepArray] = useState<step[]>([
    { id: 0, content: "", name: "", imageUrl: "" },
  ]);
  const [instructionalName, setInstructionalName] = useState(null);
  const [instructional, setInstructional] = useState({});
  const [description, setDescription] = useState("");
  const { user } = useUserAuth();
  const { setPostArray, getData } = usePostsContext();
  const router = useRouter();

  // Add another step into the StepArray
  const addToStepArray = (input: any) => {
    setStepArray((prevArr) => [...prevArr, input]);
  };

  // Set the input for the Name state of the instructional
  const handleInstructionalName = (e: any) => {
    const value = e.target.value;
    setInstructionalName(value);
  };

  // Handle instructional Description state
  const handleDescription = (e: any) => {
    const value = e.target.value;
    setDescription(value);
  };

  // Build the instructional object for local use
  const saveInstructional = () => {
    setInstructional({
      name: instructionalName,
      description: description,
      steps: stepArray,
      user: user.uid,
      userName: user.displayName,
    });
  };

  // Send the instructional to Firestore
  const sendInstructional = async () => {
    await addDoc(collection(db, "guides"), {
      name: instructionalName,
      description: description,
      steps: stepArray,
      user: user.uid,
      userName: user.displayName,
    });
  };

  return (
    <>
      <Head>
        <title>Create an Instructional</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar />
      <MainContainer>
        <H1 text="Create" />
        <input
          className="my-5 block w-full bg-transparent text-2xl font-semibold"
          type="text"
          required
          placeholder="Instructional Name..."
          onChange={(e) => handleInstructionalName(e)}
        />
        <textarea
          className="mb-5 block w-full rounded border bg-transparent p-2"
          name="text"
          required
          onChange={(e) => handleDescription(e)}
          placeholder="Description..."
        />

        <div className="mx-auto lg:grid lg:grid-cols-2 lg:gap-10">
          {stepArray.length === 0 ? (
            <StepComponent
              mainArray={stepArray}
              setStepArray={setStepArray}
              pullData={addToStepArray}
              stepNumber={1}
            />
          ) : (
            stepArray.map((step, idx) => {
              return (
                <StepComponent
                  stepNumber={idx + 1}
                  key={idx}
                  pullData={addToStepArray}
                  mainArray={stepArray}
                  setStepArray={setStepArray}
                />
              );
            })
          )}
        </div>
        <button
          className=" my-16 block rounded-2xl bg-blue-500 px-5 py-2 font-bold text-white transition-colors duration-200 ease-in-out hover:bg-green-500"
          onClick={() => {
            if (user && instructionalName) {
              saveInstructional();
              sendInstructional();
              setPostArray([]);
              getData();
              router.push("/user/profile");
            } else {
              alert("You must be signed in to save!");
            }
            // Need to put this into a single handler but it works for now
          }}
        >
          Save and Publish
        </button>
      </MainContainer>
    </>
  );
}
